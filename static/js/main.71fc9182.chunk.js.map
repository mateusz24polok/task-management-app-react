{"version":3,"sources":["Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","TaskSection/index.js","NewTaskSection/index.js","Header/index.js","Container/styled.js","Container/index.js","Footer/styled.js","Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","inputRef","useState","taskDescription","setTaskDescription","onSubmit","event","preventDefault","trim","className","ref","value","onChange","target","placeholder","autoFocus","TasksList","styled","ul","TaskItem","li","hidden","css","TaskContent","p","done","Button","button","remove","Tasks","tasks","isDoneTasksHidden","removeTask","toggleTaskDone","map","task","key","id","onClick","description","LineButton","hide","toggleDone","Buttons","toggleHideDone","setAllTasksDone","length","disabled","every","TaskSection","title","extraHeaderContent","sectionBody","NewTaskSection","Header","StyledContainer","main","Container","children","StyledFooter","footer","Footer","App","setHideDone","JSON","parse","localStorage","getItem","tasksArray","setTasksArray","useEffect","setItem","stringify","useRef","current","focus","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oWAwBeA,G,MArBF,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAAe,EACOC,mBAAS,IADhB,mBAChCC,EADgC,KACfC,EADe,KAavC,OACI,0BAAMC,SARW,SAACC,GAClBA,EAAMC,iBACFJ,EAAgBK,QAChBR,EAAWG,EAAgBK,QAE/BJ,EAAmB,KAGWK,UAAU,wBACpC,2BAAOC,IAAKT,EAAUU,MAAOR,EAAiBS,SAZhC,SAACN,GACnBF,EAAmBE,EAAMO,OAAOF,QAW2CF,UAAU,wBAAwBK,YAAY,gBAAgBC,WAAS,IAC9I,4BAAQN,UAAU,0BAAlB,e,y1CCjBL,IAAMO,EAAYC,IAAOC,GAAV,KAOTC,EAAWF,IAAOG,GAAV,KAKf,qBAAGC,QAAwBC,YAAJ,QAKhBC,EAAcN,IAAOO,EAAV,KAIlB,qBAAGC,MAAoBH,YAAJ,QAKZI,EAAST,IAAOU,OAAV,KAUb,qBAAGC,QAAwBN,YAAJ,QASvB,qBAAGG,MAAoBH,YAAJ,QCfVO,EA7BD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,kBAAmBC,EAA7B,EAA6BA,WAAYC,EAAzC,EAAyCA,eAAzC,OACV,kBAACjB,EAAD,KACKc,EAAMI,KAAI,SAAAC,GAAI,OACX,kBAAChB,EAAD,CACIiB,IAAKD,EAAKE,GACVhB,OAAQU,GAAqBI,EAAKV,MAElC,kBAACC,EAAD,CACIY,QAAS,kBAAML,EAAeE,EAAKE,KACnCZ,MAAI,GAEHU,EAAKV,KAAO,SAAM,IAGvB,kBAACF,EAAD,CAAaE,KAAMU,EAAKV,MAAOU,EAAKI,aAEpC,kBAACb,EAAD,CACIY,QAAS,kBAAMN,EAAWG,EAAKE,KAC/BT,QAAM,GAFV,sB,gqBCjBT,IAAMY,EAAavB,IAAOU,OAAV,KAejB,qBAAGc,MAAoBnB,YAAJ,QAInB,qBAAGoB,YAAgCpB,YAAJ,QCGtBqB,EArBC,SAAC,GAAD,IAAGb,EAAH,EAAGA,MAAOC,EAAV,EAAUA,kBAAmBa,EAA7B,EAA6BA,eAAgBC,EAA7C,EAA6CA,gBAA7C,OACZf,EAAMgB,OAAS,GACX,oCACI,kBAACN,EAAD,CACIC,MAAI,EACJH,QAASM,GAERb,EAAoB,kBAAoB,mBAG7C,kBAACS,EAAD,CACIE,YAAU,EACVK,SAAUjB,EAAMkB,OAAM,qBAAGvB,QACzBa,QAASO,GAHb,wBCFGI,G,MARK,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,mBAAoBC,EAA7B,EAA6BA,YAA7B,OAChB,6BAAS3C,UAAU,gBACf,wBAAIA,UAAU,uBAAuByC,GACpCC,EACAC,KCGMC,G,MAPQ,SAAC,GAAD,IAAEH,EAAF,EAAEA,MAAOE,EAAT,EAASA,YAAT,OACnB,6BAAS3C,UAAU,kBACf,wBAAIA,UAAU,yBAAyByC,GACtCE,KCGME,G,MANA,SAAC,GAAD,IAAEJ,EAAF,EAAEA,MAAF,OACX,4BAAQzC,UAAU,UACd,wBAAIA,UAAU,YAAYyC,M,+ICH3B,IAAMK,EAAkBtC,IAAOuC,KAAV,KCObC,EANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,kBAACH,EAAD,KACKG,I,4SCHF,IAAMC,EAAe1C,IAAO2C,OAAV,KCOVC,EANA,SAAC,GAAD,IAAGX,EAAH,EAAGA,MAAH,OACX,kBAACS,EAAD,KACKT,IC0GMY,MApGf,WAAgB,IAAD,EAE4B5D,oBAAS,GAFrC,mBAEN6B,EAFM,KAEagC,EAFb,OAGuB7D,mBAAS8D,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAH7E,mBAGNC,EAHM,KAGMC,EAHN,KAKbC,qBAAU,WACRJ,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,MAC5C,CAACA,IAEJ,IAAMnE,EAAWwE,iBAAO,MAgDxB,OACE,kBAAC,EAAD,KAEE,kBAAC,EAAD,CAAQvB,MAAM,gCAEd,kBAAC,EAAD,CACEA,MAAM,eACNE,YACE,kBAAC,EAAD,CACEpD,WAxBS,SAACuC,GAClB8B,GAAc,SAAAD,GAAU,4BAEjBA,GAFiB,CAGpB,CACE/B,GAA0B,IAAtB+B,EAAWtB,OAAe,EAAIsB,EAAWA,EAAWtB,OAAS,GAAGT,GAAK,EACzEE,cACAd,MAAM,QArCZxB,EAASyE,QAAQC,SAuDT1E,SAAYA,MAKlB,kBAAC,EAAD,CACEiD,MAAM,aAENC,mBACE,kBAAC,EAAD,CACEP,eA9Da,WACrBmB,GAAY,SAAAhC,GAAiB,OAAKA,MA8D1Bc,gBA7Cc,WACtBwB,GAAc,SAAAD,GAAU,OAAIA,EAAWlC,KAAI,SAAAC,GACzC,OAAO,eACFA,EADL,CAEEV,MAAM,WA0CFK,MAAOsC,EACPrC,kBAAmBA,IAIvBqB,YACE,kBAAC,EAAD,CACEtB,MAAOsC,EACPrC,kBAAmBA,EACnBC,WArES,SAACK,GAClBgC,GAAc,SAAAD,GAAU,OAAIA,EAAWQ,QAAO,SAAAzC,GAAI,OAAIA,EAAKE,KAAOA,SAqE1DJ,eAlEa,SAACI,GACtBgC,GAAc,SAAAD,GAAU,OAAIA,EAAWlC,KAAI,SAAAC,GACzC,OAAIA,EAAKE,KAAOA,EACP,eAAKF,EAAZ,CAAkBV,MAAOU,EAAKV,OAEzBU,aAkEP,kBAAC,EAAD,CAAQe,MAAM,wDC7FA2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71fc9182.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask, inputRef }) => {\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n\r\n    const onInputChange = (event) => {\r\n        setTaskDescription(event.target.value)\r\n    }\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (taskDescription.trim()) {\r\n            addNewTask(taskDescription.trim());\r\n        }\r\n        setTaskDescription(\"\");\r\n    }\r\n    return (\r\n        <form onSubmit={onFormSubmit} className=\"newTaskSection__form\">\r\n            <input ref={inputRef} value={taskDescription} onChange={onInputChange} className=\"newTaskSection__input\" placeholder=\"What's to do?\" autoFocus />\r\n            <button className=\"newTaskSection__button\">Add task</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const TasksList = styled.ul`\r\n    list-style: none;\r\n    padding: 10px 20px;\r\n    margin: 0;\r\n    grid-area: list;\r\n`;\r\n\r\nexport const TaskItem = styled.li`\r\n    display: flex;\r\n    align-items: center;\r\n    border-bottom: 1px solid rgb(250,250,250);\r\n\r\n    ${({ hidden }) => (hidden && css`\r\n        display: none;\r\n    `)}\r\n`;\r\n\r\nexport const TaskContent = styled.p`\r\n    flex-grow: 1;\r\n    margin: 20px 10px;\r\n\r\n    ${({ done }) => (done && css`\r\n        text-decoration: line-through;\r\n    `)}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    flex-basis: 30px;\r\n    flex-shrink: 0;\r\n    height: 30px;\r\n    padding: 3px;\r\n    border: none;\r\n    cursor: pointer;\r\n    color: white;\r\n    transition: background-color 0.15s;\r\n\r\n    ${({ remove }) => (remove && css`\r\n        background-color: red;\r\n        font-weight: 700;\r\n\r\n        &:hover{\r\n            background-color: hsl(0, 100%, 65%);\r\n        }\r\n    `)}\r\n\r\n    ${({ done }) => (done && css`\r\n        background-color: green;\r\n\r\n        &:hover{\r\n            background-color: hsl(120, 100%, 30%);\r\n        }\r\n    `)}\r\n`;","import React from \"react\";\r\nimport { TasksList, TaskItem, TaskContent, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, isDoneTasksHidden, removeTask, toggleTaskDone }) => (\r\n    <TasksList>\r\n        {tasks.map(task => (\r\n            <TaskItem\r\n                key={task.id}\r\n                hidden={isDoneTasksHidden && task.done}\r\n            >\r\n                <Button\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                    done\r\n                >\r\n                    {task.done ? \"âœ”\" : \"\"}\r\n                </Button>\r\n\r\n                <TaskContent done={task.done}>{task.description}</TaskContent>\r\n\r\n                <Button\r\n                    onClick={() => removeTask(task.id)}\r\n                    remove\r\n                >\r\n                    ðŸ—‘\r\n                </Button>\r\n\r\n            </TaskItem>\r\n        )\r\n        )}\r\n    </TasksList>\r\n);\r\n\r\nexport default Tasks;","import styled, {css} from \"styled-components\";\r\n\r\nexport const LineButton = styled.button`\r\n    background-color: transparent;\r\n    color: teal;\r\n    border: none;\r\n    cursor: pointer;\r\n\r\n    &:hover{\r\n        color: #009999;\r\n    }\r\n\r\n    :disabled{\r\n        color: gray;\r\n        cursor: default;\r\n    }\r\n\r\n    ${({ hide }) => (hide && css`\r\n        grid-area: button--hide;\r\n    `)}\r\n\r\n    ${({ toggleDone }) => (toggleDone && css`\r\n        grid-area: button--toggleDone;\r\n        margin-right: 15px;\r\n\r\n        @media (max-width:515px) and (orientation:portrait) {\r\n                margin: 0;  \r\n            }\r\n    `)}\r\n`;","import React from 'react';\r\nimport { LineButton } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, isDoneTasksHidden, toggleHideDone, setAllTasksDone }) => (\r\n    tasks.length > 0 && (\r\n        <>\r\n            <LineButton\r\n                hide\r\n                onClick={toggleHideDone}\r\n            >\r\n                {isDoneTasksHidden ? \"Show done tasks\" : \"Hide done tasks\"}\r\n            </LineButton>\r\n\r\n            <LineButton\r\n                toggleDone\r\n                disabled={tasks.every(({ done }) => done)}\r\n                onClick={setAllTasksDone}\r\n            >\r\n                Set all tasks done\r\n            </LineButton>\r\n        </>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst TaskSection = ({title, extraHeaderContent, sectionBody}) => (\r\n    <section className=\"tasksSection\">\r\n        <h2 className=\"tasksSection__title\">{title}</h2>\r\n        {extraHeaderContent}\r\n        {sectionBody}\r\n    </section>\r\n);\r\n\r\nexport default TaskSection;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst NewTaskSection = ({title, sectionBody}) => (\r\n    <section className=\"newTaskSection\">\r\n        <h2 className=\"newTaskSection__title\">{title}</h2>\r\n        {sectionBody}\r\n    </section>\r\n);\r\n\r\nexport default NewTaskSection;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Header = ({title}) => (\r\n    <header className=\"header\">\r\n        <h1 className=\"appTitle\">{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 1000px;\r\n    margin: 0 auto;\r\n    padding: 0 10px 10px;\r\n`;","import React from 'react';\r\nimport { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const StyledFooter = styled.footer`\r\n    padding: 15px;\r\n    font-size: 18px;\r\n    text-align: center;\r\n    background-color: teal;\r\n    color: white;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        font-size: 14px;\r\n        padding: 10px;\r\n}\r\n`;","import React from 'react';\r\nimport { StyledFooter } from \"./styled\";\r\n\r\nconst Footer = ({ title }) => (\r\n    <StyledFooter>\r\n        {title}\r\n    </StyledFooter>\r\n);\r\n\r\nexport default Footer;","import React, { useState, useEffect, useRef } from 'react';\r\nimport Form from './Form';\r\nimport Tasks from './Tasks';\r\nimport Buttons from './Buttons';\r\nimport TaskSection from './TaskSection';\r\nimport NewTaskSection from './NewTaskSection';\r\nimport Header from './Header';\r\nimport Container from './Container';\r\nimport Footer from './Footer';\r\n\r\n\r\nfunction App() {\r\n\r\n  const [isDoneTasksHidden, setHideDone] = useState(false);\r\n  const [tasksArray, setTasksArray] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasksArray))\r\n  }, [tasksArray])\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const inputFocus = () =>{\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone(isDoneTasksHidden => !isDoneTasksHidden);\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasksArray(tasksArray => tasksArray.filter(task => task.id !== id));\r\n  }\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasksArray(tasksArray => tasksArray.map(task => {\r\n      if (task.id === id) {\r\n        return { ...task, done: !task.done };\r\n      }\r\n      return task\r\n    })\r\n    );\r\n  };\r\n\r\n  const setAllTasksDone = () => {\r\n    setTasksArray(tasksArray => tasksArray.map(task => {\r\n      return {\r\n        ...task,\r\n        done: true,\r\n      }\r\n    }))\r\n  }\r\n\r\n  const addNewTask = (description) => {\r\n    setTasksArray(tasksArray => (\r\n      [\r\n        ...tasksArray,\r\n        {\r\n          id: tasksArray.length === 0 ? 1 : tasksArray[tasksArray.length - 1].id + 1,\r\n          description,\r\n          done: false\r\n        }\r\n      ]\r\n    ))\r\n    inputFocus();\r\n  }\r\n\r\n\r\n  return (\r\n    <Container>\r\n\r\n      <Header title=\"Task management application\" />\r\n\r\n      <NewTaskSection\r\n        title=\"Add new task\"\r\n        sectionBody={\r\n          <Form\r\n            addNewTask={addNewTask}\r\n            inputRef = {inputRef}\r\n          />\r\n        }\r\n      />\r\n\r\n      <TaskSection\r\n        title=\"Tasks List\"\r\n\r\n        extraHeaderContent={\r\n          <Buttons\r\n            toggleHideDone={toggleHideDone}\r\n            setAllTasksDone={setAllTasksDone}\r\n            tasks={tasksArray}\r\n            isDoneTasksHidden={isDoneTasksHidden}\r\n          />\r\n        }\r\n\r\n        sectionBody={\r\n          <Tasks\r\n            tasks={tasksArray}\r\n            isDoneTasksHidden={isDoneTasksHidden}\r\n            removeTask={removeTask}\r\n            toggleTaskDone={toggleTaskDone}\r\n          />\r\n        }\r\n      />\r\n\r\n      <Footer title=\"Task management application by Mateusz Polok 2020\" />\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}