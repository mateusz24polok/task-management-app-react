{"version":3,"sources":["GlobalStyle.js","Form/styled.js","Tasks/tasksSlice.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","TaskSection/styled.js","TaskSection/index.js","NewTaskSection/styled.js","NewTaskSection/index.js","Header/styled.js","Header/index.js","Container/styled.js","Container/index.js","Footer/styled.js","Footer/index.js","App.js","serviceWorker.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","NewTaskForm","styled","form","NewTaskInput","input","NewTaskButton","button","theme","color","teal","white","lightTeal","tasksSlice","createSlice","name","initialState","tasks","description","done","id","isDoneTasksHidden","reducers","addNewTask","payload","push","toggleTaskDone","forEach","task","removeTask","action","removeTaskIndex","findIndex","splice","setAllTasksDone","state","toggleHideDone","actions","selectTasks","Form","useState","taskDescription","setTaskDescription","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","nanoid","current","focus","ref","value","onChange","target","placeholder","autoFocus","TasksList","ul","TaskItem","li","alabaster","hidden","css","TaskContent","p","Button","remove","red","lightRed","green","lightGreen","Tasks","useSelector","map","key","onClick","LineButton","transparent","gray","hide","toggleDone","Buttons","length","disabled","every","StyledSection","section","SectionTitle","h2","TaskSection","title","extraHeaderContent","sectionBody","h1","NewTaskSection","AppTitle","Header","StyledContainer","main","Container","children","StyledFooter","footer","Footer","App","Boolean","window","location","hostname","match","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.317a0094.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        font-family: 'Montserrat', sans-serif;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        background-color: rgb(250, 250, 250);\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const NewTaskForm = styled.form`\r\n    display: flex;\r\n    padding: 15px;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        flex-wrap: wrap;\r\n}\r\n`;\r\n\r\nexport const NewTaskInput = styled.input`\r\n    flex-grow: 1;\r\n    padding: 10px;\r\n    font-size: 20px;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        width: 100%;\r\n        flex-basis: 100%;\r\n        height: 50px;\r\n}\r\n`;\r\n\r\nexport const NewTaskButton = styled.button`\r\n    flex-basis: 100px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({theme})=>theme.color.white};\r\n    padding: 5px;\r\n    border: none;\r\n    margin-left: 10px;\r\n    cursor: pointer;\r\n    transition: background-color 0.2s ease-in, transform 0.15s ease;\r\n\r\n    &:hover{\r\n        background-color: ${({theme})=>theme.color.lightTeal};\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        flex-basis: 100%;\r\n        margin: 10px 0;\r\n        padding: 10px;\r\n        height: 50px;\r\n        font-size: 20px;\r\n}\r\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"slice\",\r\n    initialState: {\r\n        tasks: [\r\n            {\r\n                description: \"Task 1\",\r\n                done: false,\r\n                id: 1,\r\n            },\r\n            {\r\n                description: \"Task 2\",\r\n                done: true,\r\n                id: 2,\r\n            }\r\n        ],\r\n\r\n        isDoneTasksHidden: false,\r\n    },\r\n    reducers: {\r\n        addNewTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload)\r\n        },\r\n\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            tasks.forEach(task => {\r\n                if (task.id === payload) {\r\n                    task.done = !task.done;\r\n                };\r\n            });\r\n        },\r\n\r\n        removeTask: ({ tasks }, action) => {\r\n            const removeTaskIndex = tasks.findIndex(task => task.id === action.payload);\r\n            tasks.splice(removeTaskIndex, 1);\r\n        },\r\n\r\n        setAllTasksDone: (state) => {\r\n            state.tasks.forEach(task => task.done = true);\r\n        },\r\n\r\n        toggleHideDone: (state) => {\r\n            state.isDoneTasksHidden = !state.isDoneTasksHidden;\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addNewTask, toggleTaskDone, removeTask, toggleHideDone, setAllTasksDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer; ","import React, { useState, useRef } from \"react\";\r\nimport { NewTaskForm, NewTaskInput, NewTaskButton } from \"./styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addNewTask } from \"../Tasks/tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const inputFocus = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onInputChange = (event) => {\r\n        setTaskDescription(event.target.value)\r\n    }\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (taskDescription.trim()) {\r\n            dispatch(addNewTask({\r\n                description: taskDescription.trim(),\r\n                id: nanoid(),\r\n                done: false\r\n            }))\r\n        }\r\n        setTaskDescription(\"\");\r\n        inputFocus();\r\n    }\r\n    return (\r\n        <NewTaskForm onSubmit={onFormSubmit}>\r\n            <NewTaskInput ref={inputRef} value={taskDescription} onChange={onInputChange} placeholder=\"What's to do?\" autoFocus />\r\n            <NewTaskButton>Add task</NewTaskButton>\r\n        </NewTaskForm>\r\n    )\r\n}\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const TasksList = styled.ul`\r\n    list-style: none;\r\n    padding: 10px 20px;\r\n    margin: 0;\r\n    grid-area: list;\r\n`;\r\n\r\nexport const TaskItem = styled.li`\r\n    display: flex;\r\n    align-items: center;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alabaster};\r\n\r\n    ${({ hidden }) => (hidden && css`\r\n        display: none;\r\n    `)}\r\n`;\r\n\r\nexport const TaskContent = styled.p`\r\n    flex-grow: 1;\r\n    margin: 20px 10px;\r\n\r\n    ${({ done }) => (done && css`\r\n        text-decoration: line-through;\r\n    `)}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    flex-basis: 30px;\r\n    flex-shrink: 0;\r\n    height: 30px;\r\n    padding: 3px;\r\n    border: none;\r\n    cursor: pointer;\r\n    color: ${({ theme }) => theme.color.white};\r\n    transition: background-color 0.15s;\r\n\r\n    ${({ remove }) => (remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n        font-weight: 700;\r\n\r\n        &:hover{\r\n            background-color: ${({ theme }) => theme.color.lightRed};\r\n        }\r\n    `)}\r\n\r\n    ${({ done }) => (done && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n\r\n        &:hover{\r\n            background-color: ${({ theme }) => theme.color.lightGreen};\r\n        }\r\n    `)}\r\n`;","import React from \"react\";\r\nimport { TasksList, TaskItem, TaskContent, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"./tasksSlice\";\r\n\r\nconst Tasks = () => {\r\n    const { tasks, isDoneTasksHidden } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <TasksList>\r\n            {tasks.map(task => (\r\n                <TaskItem\r\n                    key={task.id}\r\n                    hidden={isDoneTasksHidden && task.done}\r\n                >\r\n                    <Button\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                        done\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n\r\n                    <TaskContent done={task.done}>{task.description}</TaskContent>\r\n\r\n                    <Button\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                        remove\r\n                    >\r\n                        🗑\r\n                </Button>\r\n\r\n                </TaskItem>\r\n            )\r\n            )}\r\n        </TasksList>\r\n    )\r\n};\r\n\r\nexport default Tasks;","import styled, { css } from \"styled-components\";\r\n\r\nexport const LineButton = styled.button`\r\n    background-color: ${({ theme }) => theme.color.transparent};\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    cursor: pointer;\r\n\r\n    &:hover{\r\n        color: ${({ theme }) => theme.color.lightTeal};\r\n    }\r\n\r\n    :disabled{\r\n        color: ${({ theme }) => theme.color.gray};\r\n        cursor: default;\r\n    }\r\n\r\n    ${({ hide }) => (hide && css`\r\n        grid-area: button--hide;\r\n    `)}\r\n\r\n    ${({ toggleDone }) => (toggleDone && css`\r\n        grid-area: button--toggleDone;\r\n        margin-right: 15px;\r\n\r\n        @media (max-width:515px) and (orientation:portrait) {\r\n                margin: 0;  \r\n            }\r\n    `)}\r\n`;","import React from 'react';\r\nimport { LineButton } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllTasksDone } from \"../Tasks/tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, isDoneTasksHidden } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        tasks.length > 0 && (\r\n            <>\r\n                <LineButton\r\n                    hide\r\n                    onClick={() => dispatch(toggleHideDone())}\r\n                >\r\n                    {isDoneTasksHidden ? \"Show done tasks\" : \"Hide done tasks\"}\r\n                </LineButton>\r\n\r\n                <LineButton\r\n                    toggleDone\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                    onClick={() => dispatch(setAllTasksDone())}\r\n                >\r\n                    Set all tasks done\r\n            </LineButton>\r\n            </>\r\n        )\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    display: grid;\r\n    grid-template-areas: \"title button--hide button--toggleDone\" \"list list list\";\r\n    grid-template-columns: 1fr auto auto;\r\n    grid-gap: 20px;\r\n    align-items: center;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    margin-top: 20px;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        grid-template-areas: \"title\" \"button--hide\" \"button--toggleDone\" \"list\";\r\n        grid-template-columns: 1fr;\r\n}\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n    font-size: 22px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alabaster};\r\n    padding: 15px;\r\n    margin: 0;\r\n    grid-area: title;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        text-align: center;\r\n}\r\n`;","import React from \"react\";\r\nimport { StyledSection, SectionTitle } from \"./styled\";\r\n\r\nconst TaskSection = ({ title, extraHeaderContent, sectionBody }) => (\r\n    <StyledSection>\r\n        <SectionTitle>{title}</SectionTitle>\r\n        {extraHeaderContent}\r\n        {sectionBody}\r\n    </StyledSection>\r\n);\r\n\r\nexport default TaskSection;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: white;\r\n`;\r\n\r\nexport const SectionTitle = styled.h1`\r\n    font-size: 22px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alabaster};\r\n    padding: 15px;\r\n    margin-bottom: 0;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        text-align: center;\r\n}\r\n`;","import React from 'react';\r\nimport { StyledSection, SectionTitle } from \"./styled\"\r\n\r\nconst NewTaskSection = ({ title, sectionBody }) => (\r\n    <StyledSection>\r\n        <SectionTitle>{title}</SectionTitle>\r\n        {sectionBody}\r\n    </StyledSection>\r\n);\r\n\r\nexport default NewTaskSection;","import styled from \"styled-components\";\r\n\r\nexport const AppTitle = styled.h1`\r\n    font-family: 'Arvo', serif;\r\n    text-align: center;\r\n    font-style: italic;\r\n    font-size: 36px;\r\n`;","import React from 'react';\r\nimport { AppTitle } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <AppTitle>\r\n            {title}\r\n        </AppTitle>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 1000px;\r\n    margin: 0 auto;\r\n    padding: 0 10px 10px;\r\n`;","import React from 'react';\r\nimport { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const StyledFooter = styled.footer`\r\n    padding: 15px;\r\n    font-size: 18px;\r\n    text-align: center;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.alabaster};\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        font-size: 14px;\r\n        padding: 10px;\r\n}\r\n`;","import React from 'react';\r\nimport { StyledFooter } from \"./styled\";\r\n\r\nconst Footer = ({ title }) => (\r\n    <StyledFooter>\r\n        {title}\r\n    </StyledFooter>\r\n);\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Form from './Form';\r\nimport Tasks from './Tasks';\r\nimport Buttons from './Buttons';\r\nimport TaskSection from './TaskSection';\r\nimport NewTaskSection from './NewTaskSection';\r\nimport Header from './Header';\r\nimport Container from './Container';\r\nimport Footer from './Footer';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Container>\r\n\r\n      <Header title=\"Task management application\" />\r\n\r\n      <NewTaskSection\r\n        title=\"Add new task\"\r\n        sectionBody={<Form />}\r\n      />\r\n\r\n      <TaskSection\r\n        title=\"Tasks List\"\r\n        extraHeaderContent={<Buttons />}\r\n        sectionBody={<Tasks />}\r\n      />\r\n\r\n      <Footer title=\"Task management application by Mateusz Polok 2020\" />\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../src/Tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from \"./GlobalStyle\"\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./theme\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\r\n    color: {\r\n        alabaster: \"#FAFAFA\",\r\n        lightGreen: \"#009900\",\r\n        lightRed: \"#FF4D4D\",\r\n        lightTeal: \"#009999\",\r\n        gray: \"#808080\",\r\n        green: \"#008000\",\r\n        teal: \"#008080\",\r\n        transparent: \"transparent\",\r\n        red: \"#FF0000\",\r\n        white: \"#FFFFFF\"\r\n    }\r\n}"],"sourceRoot":""}