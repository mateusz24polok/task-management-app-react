{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","TaskSection/index.js","NewTaskSection/index.js","Header/index.js","Container/index.js","Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","taskDescription","setTaskDescription","onSubmit","event","preventDefault","trim","className","value","onChange","target","placeholder","autoFocus","Tasks","tasks","isDoneTasksHidden","removeTask","toggleTaskDone","map","task","key","id","done","onClick","description","Buttons","toggleHideDone","setAllTasksDone","length","disabled","every","TaskSection","title","extraHeaderContent","sectionBody","NewTaskSection","Header","Container","children","Footer","App","setHideDone","JSON","parse","localStorage","getItem","tasksArray","setTasksArray","useEffect","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.58e68d2c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n\r\n    const onInputChange = (event) => {\r\n        setTaskDescription(event.target.value)\r\n    }\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (taskDescription.trim()) {\r\n            addNewTask(taskDescription.trim());\r\n        }\r\n        setTaskDescription(\"\");\r\n    }\r\n    return (\r\n        <form onSubmit={onFormSubmit} className=\"newTaskSection__form\">\r\n            <input value={taskDescription} onChange={onInputChange} className=\"newTaskSection__input\" placeholder=\"What's to do?\" autoFocus />\r\n            <button className=\"newTaskSection__button\">Add task</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, isDoneTasksHidden, removeTask, toggleTaskDone }) => (\r\n    <ul className=\"tasksSection__list\">\r\n        {tasks.map(task => (\r\n            <li\r\n                key={task.id}\r\n                className={`tasksSection__listItem ${isDoneTasksHidden && task.done ? \"tasksSection__listItem--hidden\" : \"\"}`}\r\n            >\r\n\r\n                <button\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                    className={`tasksSection__listItemButton tasksSection__listItemButton--done`}\r\n                >\r\n                    {task.done ? \"âœ”\" : \"\"}\r\n                </button>\r\n\r\n                <p className={`tasksSection__listItemText ${task.done ? \"tasksSection__listItemText--done\" : \"\"}`}>{task.description}</p>\r\n\r\n                <button\r\n                    onClick={() => removeTask(task.id)}\r\n                    className={`tasksSection__listItemButton tasksSection__listItemButton--delete`}\r\n                >\r\n                    ðŸ—‘\r\n                </button>\r\n\r\n            </li>\r\n        )\r\n        )}\r\n    </ul >\r\n);\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Buttons = ({ tasks, isDoneTasksHidden, toggleHideDone, setAllTasksDone }) => (\r\n    tasks.length > 0 && (\r\n        <>\r\n            <button\r\n                className=\"tasksSection__button tasksSection__button--hide\"\r\n                onClick={toggleHideDone}\r\n            >\r\n                {isDoneTasksHidden ? \"Show done tasks\" : \"Hide done tasks\"}\r\n            </button>\r\n            <button\r\n                className=\"tasksSection__button tasksSection__button--toggleDone\"\r\n                disabled={tasks.every(({ done }) => done)}\r\n                onClick={setAllTasksDone}\r\n            >\r\n                Set all tasks done\r\n            </button>\r\n        </>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst TaskSection = ({title, extraHeaderContent, sectionBody}) => (\r\n    <section className=\"tasksSection\">\r\n        <h2 className=\"tasksSection__title\">{title}</h2>\r\n        {extraHeaderContent}\r\n        {sectionBody}\r\n    </section>\r\n);\r\n\r\nexport default TaskSection;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst NewTaskSection = ({title, sectionBody}) => (\r\n    <section className=\"newTaskSection\">\r\n        <h2 className=\"newTaskSection__title\">{title}</h2>\r\n        {sectionBody}\r\n    </section>\r\n);\r\n\r\nexport default NewTaskSection;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Header = ({title}) => (\r\n    <header className=\"header\">\r\n        <h1 className=\"appTitle\">{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Container = ({children})=>(\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Footer = ({title}) => (\r\n    <footer className=\"footer\">{title}</footer>\r\n);\r\n\r\nexport default Footer;","import React, { useState, useEffect } from 'react';\r\nimport Form from './Form';\r\nimport Tasks from './Tasks';\r\nimport Buttons from './Buttons';\r\nimport TaskSection from './TaskSection';\r\nimport NewTaskSection from './NewTaskSection';\r\nimport Header from './Header';\r\nimport Container from './Container';\r\nimport Footer from './Footer';\r\n\r\n\r\nfunction App() {\r\n\r\n  const [isDoneTasksHidden, setHideDone] = useState(false);\r\n  const [tasksArray, setTasksArray] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasksArray))\r\n  }, [tasksArray])\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone(isDoneTasksHidden => !isDoneTasksHidden);\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasksArray(tasksArray => tasksArray.filter(task => task.id !== id));\r\n  }\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasksArray(tasksArray => tasksArray.map(task => {\r\n      if (task.id === id) {\r\n        return { ...task, done: !task.done };\r\n      }\r\n      return task\r\n    })\r\n    );\r\n  };\r\n\r\n  const setAllTasksDone = () => {\r\n    setTasksArray(tasksArray => tasksArray.map(task => {\r\n      return {\r\n        ...task,\r\n        done: true,\r\n      }\r\n    }))\r\n  }\r\n\r\n  const addNewTask = (description) => {\r\n    setTasksArray(tasksArray => (\r\n      [\r\n        ...tasksArray,\r\n        {\r\n          id: tasksArray.length === 0 ? 1 : tasksArray[tasksArray.length - 1].id + 1,\r\n          description,\r\n          done: false\r\n        }\r\n      ]\r\n    ))\r\n  }\r\n\r\n\r\n  return (\r\n    <Container>\r\n\r\n      <Header title=\"Task management application\" />\r\n\r\n      <NewTaskSection\r\n        title=\"Add new task\"\r\n        sectionBody={\r\n          <Form\r\n            addNewTask={addNewTask}\r\n          />\r\n        }\r\n      />\r\n\r\n      <TaskSection\r\n        title=\"Tasks List\"\r\n\r\n        extraHeaderContent={\r\n          <Buttons\r\n            toggleHideDone={toggleHideDone}\r\n            setAllTasksDone={setAllTasksDone}\r\n            tasks={tasksArray}\r\n            isDoneTasksHidden={isDoneTasksHidden}\r\n          />\r\n        }\r\n\r\n        sectionBody={\r\n          <Tasks\r\n            tasks={tasksArray}\r\n            isDoneTasksHidden={isDoneTasksHidden}\r\n            removeTask={removeTask}\r\n            toggleTaskDone={toggleTaskDone}\r\n          />\r\n        }\r\n      />\r\n\r\n      <Footer title=\"Task management application by Mateusz Polok 2020\" />\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}