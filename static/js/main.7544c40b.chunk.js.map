{"version":3,"sources":["GlobalStyle.js","components/PageNavigation/styled.js","components/PageNavigation/index.js","components/Header/styled.js","components/Header/index.js","components/Container/styled.js","components/Container/index.js","components/Footer/styled.js","components/Footer/index.js","components/Tasks/styled.js","components/Tasks/localStorageFunctions.js","components/Tasks/tasksSlice.js","components/Tasks/index.js","components/LineButton/styled.js","components/Buttons/styled.js","components/Buttons/index.js","components/Section/styled.js","components/Section/index.js","components/NewTaskSection/styled.js","components/NewTaskSection/index.js","components/Form/styled.js","components/Form/index.js","components/NewTaskForm/index.js","components/SearchTaskForm/index.js","pages/TasksPage.js","pages/AboutAuthorPage.js","App.js","serviceWorker.js","sagas/localStorageSaga.js","sagas/sampleTasksSaga.js","sagas/root.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","Navigation","styled","nav","theme","color","teal","alabaster","NavigationList","ul","NavigationItem","li","StyledNavLink","NavLink","attrs","activeClassName","white","PageNavigation","navigationItems","length","map","navItem","key","id","exact","to","path","name","AppTitle","h1","Header","title","StyledContainer","main","Container","children","StyledFooter","footer","Footer","TasksList","TaskItem","hidden","css","TaskContent","p","done","Button","button","remove","red","lightRed","green","lightGreen","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","initialState","parse","getItem","isDoneTasksHidden","exampleTasksLoading","exampleTasksLoadingError","reducers","addNewTask","payload","push","toggleTaskDone","forEach","task","removeTask","action","removeTaskIndex","findIndex","splice","setAllTasksDone","state","toggleHideDone","getSampleTasks","getSampleTasksErrorHandle","resetExampleTasksLoadingError","setExampleTasks","actions","selectTasks","selectExampleTaskLoading","selectExampleTaskLoadingError","Tasks","locationParams","useLocation","queryTask","URLSearchParams","search","get","useSelector","query","trim","filter","description","toLowerCase","includes","selectQueryTask","console","log","dispatch","useDispatch","onClick","LineButton","transparent","lightTeal","gray","StyledLineButton","hide","toggleDone","Buttons","disabled","every","StyledSection","section","padding","blockDisplay","SectionTitle","h2","centerTitle","Section","extraHeaderContent","sectionBody","Title","TitleSection","div","NewTaskSection","loadingStatus","loadingErrorInfo","StyledForm","form","Input","input","Form","buttonContent","inputPlaceholder","onFormSubmit","inputRef","inputValue","onInputChange","onSubmit","ref","value","onChange","placeholder","autoFocus","NewTaskForm","useState","taskDescription","setTaskDescription","useRef","event","preventDefault","nanoid","current","focus","target","SearchTaskForm","searchedTask","setSearchedTask","history","useHistory","location","useEffect","inputValueInForm","TasksPage","AboutAuthorPage","App","basename","component","Boolean","window","hostname","match","setLocalStorageTask","watchTaskChangeSaga","select","call","takeEvery","getSampleTasksGenerator","watchGetSampleTasks","fetchSampleTasks","a","fetch","response","ok","Error","statusText","json","data","delay","sampleTasksResponse","put","takeLatest","type","all","sagaMiddleware","createSaga","configureStore","reducer","tasksReducer","middleware","run","rootSaga","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6hBAEO,IAAMA,EAAcC,YAAH,K,s6BCCjB,IAAMC,EAAaC,IAAOC,IAAV,KAIC,qBAAGC,MAAkBC,MAAMC,QACtC,qBAAGF,MAAkBC,MAAME,aAQ3BC,EAAiBN,IAAOO,GAAV,KASdC,EAAiBR,IAAOS,GAAV,KAKdC,EAAgBV,YAAOW,KAASC,MAAM,CAC/CC,gBAAiB,UADQb,CAAH,KAIb,qBAAGE,MAAkBC,MAAMW,SAGvB,qBAAGZ,MAAkBC,MAAMW,SCZ7BC,EArBQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACnB,kBAACjB,EAAD,KACI,kBAACO,EAAD,KACKU,GAAmBA,EAAgBC,OAE/BD,EAAgBE,KAAI,SAAAC,GAAO,OACxB,kBAACX,EAAD,CAAgBY,IAAKD,EAAQE,IACzB,kBAACX,EAAD,CAAeY,MAAOH,EAAQG,MAAOC,GAAIJ,EAAQK,MAAOL,EAAQM,UAGtE,Q,gLCZX,IAAMC,EAAW1B,IAAO2B,GAAV,KCSNC,EARA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,gCACI,kBAACH,EAAD,KACKG,K,+ICJN,IAAMC,EAAkB9B,IAAO+B,KAAV,KCObC,EANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,kBAACH,EAAD,KACKG,I,ySCHF,IAAMC,EAAelC,IAAOmC,OAAV,KAID,qBAAGjC,MAAkBC,MAAMC,QACtC,qBAAGF,MAAkBC,MAAME,aCEzB+B,EANA,SAAC,GAAD,IAAGP,EAAH,EAAGA,MAAH,OACX,kBAACK,EAAD,KACKL,I,4xCCHF,IAAMQ,EAAYrC,IAAOO,GAAV,KAOT+B,EAAWtC,IAAOS,GAAV,KAGU,qBAAGP,MAAkBC,MAAME,aAEpD,qBAAGkC,QAAwBC,YAAJ,QAKhBC,EAAczC,IAAO0C,EAAV,KAIlB,qBAAGC,MAAoBH,YAAJ,QAKZI,EAAS5C,IAAO6C,OAAV,KAON,qBAAG3C,MAAkBC,MAAMW,SAGlC,qBAAGgC,QAAwBN,YAAJ,KACD,qBAAGtC,MAAkBC,MAAM4C,OAIvB,qBAAG7C,MAAkBC,MAAM6C,eAIrD,qBAAGL,MAAoBH,YAAJ,KACG,qBAAGtC,MAAkBC,MAAM8C,SAGvB,qBAAG/C,MAAkBC,MAAM+C,iB,QCnD9CC,EAA0B,SAACC,GAAD,OAAWC,aAAaC,QAAQ,QAASC,KAAKC,UAAUJ,KCGzFK,EAAaC,YAAY,CAC3BjC,KAAM,QACNkC,aAAc,CACVP,MDJsCG,KAAKK,MAAMP,aAAaQ,QAAQ,WAAa,GCKnFC,mBAAmB,EACnBC,qBAAqB,EACrBC,yBAA0B,IAE9BC,SAAU,CACNC,WAAY,cAA6B,IAA1Bd,EAAyB,EAAzBA,MAAWe,EAAc,EAAdA,QACtBf,EAAMgB,KAAKD,IAGfE,eAAgB,cAA6B,IAA1BjB,EAAyB,EAAzBA,MAAWe,EAAc,EAAdA,QAC1Bf,EAAMkB,SAAQ,SAAAC,GACNA,EAAKlD,KAAO8C,IACZI,EAAK5B,MAAQ4B,EAAK5B,UAK9B6B,WAAY,WAAYC,GAAY,IAArBrB,EAAoB,EAApBA,MACLsB,EAAkBtB,EAAMuB,WAAU,SAAAJ,GAAI,OAAIA,EAAKlD,KAAOoD,EAAON,WACnEf,EAAMwB,OAAOF,EAAiB,IAGlCG,gBAAiB,SAACC,GACdA,EAAM1B,MAAMkB,SAAQ,SAAAC,GAAI,OAAIA,EAAK5B,MAAO,MAG5CoC,eAAgB,SAACD,GACbA,EAAMhB,mBAAqBgB,EAAMhB,mBAGrCkB,eAAgB,SAACF,GACbA,EAAMf,qBAAsB,GAGhCkB,0BAA2B,SAACH,GACxBA,EAAMf,qBAAsB,EAC5Be,EAAM1B,MAAQ,GACd0B,EAAMd,yBAA2B,gCAGrCkB,8BAA+B,SAACJ,GAC5BA,EAAMd,yBAA2B,IAGrCmB,gBAAiB,SAACL,EAAD,GAAyB,IAAfX,EAAc,EAAdA,QACvBW,EAAM1B,MAAQe,EACdW,EAAMf,qBAAsB,M,EAepCN,EAAW2B,QATXlB,E,EAAAA,WACAG,E,EAAAA,eACAG,E,EAAAA,WACAO,E,EAAAA,eACAF,E,EAAAA,gBACAG,E,EAAAA,eACAG,E,EAAAA,gBACAF,G,EAAAA,0BACAC,G,EAAAA,8BAGSG,GAAc,SAAAP,GAAK,OAAIA,EAAM1B,OAC7BkC,GAA2B,SAAAR,GAAK,OAAIA,EAAM1B,MAAMW,qBAChDwB,GAAgC,SAAAT,GAAK,OAAIA,EAAM1B,MAAMY,0BAQnDP,KAAf,Q,QCpCe+B,GAtCD,WACV,IAAMC,EAAiBC,eAEjBC,EADe,IAAIC,gBAAgBH,EAAeI,QACzBC,IAAI,QAC7B1C,EAAQ2C,aAAY,SAAAjB,GAAK,OD+DJ,SAACA,EAAOkB,GACnC,OAAKA,GAA0B,KAAjBA,EAAMC,OAGNZ,GAAYP,GAAO1B,MAAM8C,QAAO,qBAAGC,YAA8BC,cAAcC,SAASL,EAAMI,cAAcH,WAF/GZ,GAAYP,GAAO1B,MCjEKkD,CAAgBxB,EAAOa,MAC1DY,QAAQC,IAAIpD,GALI,IAMRU,EAAsBiC,YAAYV,IAAlCvB,kBACF2C,EAAWC,cACjB,OACI,kBAACrE,EAAD,KACKe,EAAMlC,KAAI,SAAAqD,GAAI,OACX,kBAACjC,EAAD,CACIlB,IAAKmD,EAAKlD,GACVkB,OAAQuB,GAAqBS,EAAK5B,MAElC,kBAACC,EAAD,CACI+D,QAAS,kBAAMF,EAASpC,EAAeE,EAAKlD,MAC5CsB,MAAI,GAEH4B,EAAK5B,KAAO,SAAM,IAGvB,kBAACF,EAAD,CAAaE,KAAM4B,EAAK5B,MAAO4B,EAAK4B,aAEpC,kBAACvD,EAAD,CACI+D,QAAS,kBAAMF,EAASjC,EAAWD,EAAKlD,MACxCyB,QAAM,GAFV,sB,mRC5Bb,IAAM8D,GAAa5G,IAAO6C,OAAV,MACC,qBAAG3C,MAAkBC,MAAM0G,eACtC,qBAAG3G,MAAkBC,MAAMC,QAKvB,qBAAGF,MAAkBC,MAAM2G,aAI3B,qBAAG5G,MAAkBC,MAAM4G,Q,4cCVrC,IAAMC,GAAmBhH,YAAO4G,GAAP5G,CAAH,MACvB,qBAAGiH,MAAoBzE,YAAJ,SAInB,qBAAG0E,YAAgC1E,YAAJ,SCsBtB2E,GAzBC,WAAO,IAAD,EACmBpB,YAAYV,IAAzCjC,EADU,EACVA,MAAOU,EADG,EACHA,kBACT2C,EAAWC,cACjB,OACItD,EAAMnC,OAAS,GACX,oCACI,kBAAC+F,GAAD,CACIC,MAAI,EACJN,QAAS,kBAAMF,EAAS1B,OAEvBjB,EAAoB,kBAAoB,mBAG7C,kBAACkD,GAAD,CACIE,YAAU,EACVE,SAAUhE,EAAMiE,OAAM,qBAAG1E,QACzBgE,QAAS,kBAAMF,EAAS5B,OAH5B,wB,wgCChBT,IAAMyC,GAAgBtH,IAAOuH,QAAV,MAMF,qBAAGrH,MAAkBC,MAAMW,SAEpC,qBAAG0G,WAEZ,qBAAGC,cAAmCjF,YAAJ,SAU3BkF,GAAe1H,IAAO2H,GAAV,MAEM,qBAAGzH,MAAkBC,MAAME,aAKpD,qBAAGuH,aAAiCpF,YAAJ,SCbvBqF,GAbC,SAAC,GAAD,IAAGhG,EAAH,EAAGA,MAAOiG,EAAV,EAAUA,mBAAoBC,EAA9B,EAA8BA,YAAaN,EAA3C,EAA2CA,aAAcG,EAAzD,EAAyDA,YAAaJ,EAAtE,EAAsEA,QAAtE,OACZ,kBAACF,GAAD,CACIG,aAAcA,EACdD,QAASA,GAGT,kBAACE,GAAD,CAAcE,YAAaA,GAAc/F,GACxCiG,EACAC,I,q1BCRF,IAAMT,GAAgBtH,IAAOuH,QAAV,MAIbS,GAAQhI,IAAO2B,GAAV,MAEa,qBAAGzB,MAAkBC,MAAME,aAS7C2G,GAAmBhH,YAAO4G,GAAP5G,CAAH,MAQhBiI,GAAejI,IAAOkI,IAAV,MCAVC,GArBQ,SAAC,GAA4B,IAA1BtG,EAAyB,EAAzBA,MAAOkG,EAAkB,EAAlBA,YACvBK,EAAgBrC,YAAYT,IAC5B+C,EAAmBtC,YAAYR,IAC/BkB,EAAWC,cAEjB,OACI,kBAAC,GAAD,KACI,kBAACuB,GAAD,KACI,kBAACD,GAAD,KAAQnG,GACR,kBAAC,GAAD,CACIuF,SAAUgB,GAAiBC,EAC3B1B,QAAS,kBAAMF,EAASzB,OAEF,KAArBqD,EAA2BD,EAAgB,aAAe,oBAAuBC,IAGzFN,I,8hCCnBN,IAAMO,GAAatI,IAAOuI,KAAV,MASVC,GAAQxI,IAAOyI,MAAV,MAYL7F,GAAS5C,IAAO6C,OAAV,MAEK,qBAAG3C,MAAkBC,MAAMC,QACtC,qBAAEF,MAAeC,MAAMW,SAQR,qBAAEZ,MAAeC,MAAM2G,aCtBpC4B,GATF,SAAC,GAA4F,IAA1FC,EAAyF,EAAzFA,cAAeC,EAA0E,EAA1EA,iBAAkBC,EAAwD,EAAxDA,aAAcC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACjF,OACI,kBAACV,GAAD,CAAYW,SAAUJ,GAClB,kBAACL,GAAD,CAAOU,IAAKJ,EAAUK,MAAOJ,EAAYK,SAAUJ,EAAeK,YAAaT,EAAkBU,WAAS,IAC1G,kBAAC,GAAD,KAASX,KCmCNY,GApCK,WAAO,IAAD,EACwBC,mBAAS,IADjC,oBACfC,EADe,KACEC,EADF,KAEhBZ,EAAWa,iBAAO,MAClBlD,EAAWC,cAqBjB,OACI,kBAAC,GAAD,CACImC,aAda,SAACe,GAClBA,EAAMC,iBACFJ,EAAgBxD,QAChBQ,EAASvC,EAAW,CAChBiC,YAAasD,EAAgBxD,OAC7B5E,GAAIyI,cACJnH,MAAM,KAGd+G,EAAmB,IAfnBZ,EAASiB,QAAQC,SAqBblB,SAAUA,EACVC,WAAYU,EACZT,cApBc,SAACY,GACnBF,EAAmBE,EAAMK,OAAOd,QAoB5BP,iBAAiB,gBACjBD,cAAc,cCCXuB,GAlCQ,WAAO,IAAD,EACeV,mBAAS,IADxB,oBAClBW,EADkB,KACJC,EADI,KAEnBC,EAAUC,eACVC,EAAW7E,eACXM,EAAS,IAAIJ,gBAAgB2E,EAAS1E,QAASC,IAAI,QAEzD0E,qBAAU,WACNJ,EAAgBpE,KACjB,CAACuE,IAeJ,OACI,kBAAC,GAAD,CACI3B,iBAAiB,mBACjBD,cAAc,SACdE,aAVa,SAACe,GAClBA,EAAMC,iBACN,IAAMY,EAAmBb,EAAMK,OAAO,GAAGd,MACzCkB,EAAQjG,KAAR,gBAAsBqG,KAQlB1B,WAAYoB,EACZnB,cAnBc,SAACY,GACQ,KAAvBA,EAAMK,OAAOd,OACbkB,EAAQjG,KAAK,IAEjBgG,EAAgBR,EAAMK,OAAOd,WCetBuB,GAxBG,kBACd,oCAEI,kBAAC,GAAD,CACI7I,MAAM,eACNkG,YAAa,kBAAC,GAAD,QAGjB,kBAAC,GAAD,CACIN,cAAY,EACZ5F,MAAM,eACNkG,YAAa,kBAAC,GAAD,QAGjB,kBAAC,GAAD,CACIlG,MAAM,aACNiG,mBAAoB,kBAAC,GAAD,MACpBC,YAAa,kBAAC,GAAD,UCXV4C,GAVS,kBACpB,kBAAC,GAAD,CACIlD,cAAY,EACZG,aAAW,EACXJ,QAAU,gBACV3F,MAAM,eACNkG,YARQ,mkBCMV/G,GAAkB,CACtB,CACES,KAAM,QACND,KAAM,IACNF,OAAO,EACPD,GAAI,GAEN,CACEI,KAAM,eACND,KAAM,UACNF,OAAO,EACPD,GAAI,IA6BOuJ,GAzBH,WAEV,OACE,kBAAC,IAAD,CAAeC,SAAS,6BACtB,kBAAC,EAAD,KAEE,kBAAC,EAAD,CAAQhJ,MAAM,gCAEd,kBAAC,EAAD,CAAgBb,gBAAiBA,KAEjC,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOM,OAAK,EAACE,KAAK,IAAIsJ,UAAWJ,KACjC,kBAAC,KAAD,CAAOlJ,KAAK,UAAUsJ,UAAWH,KACjC,kBAAC,KAAD,KACE,2CAIJ,kBAAC,EAAD,CAAQ9I,MAAM,yDC9BFkJ,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2D,sDCdIC,I,aAKOC,IALjB,SAAUD,KAAV,0EACsB,OADtB,SAC4BE,aAAOhG,IADnC,OAEI,OAFJ,SACYjC,EADZ,EACYA,MADZ,SAEUkI,aAAKnI,EAAyBC,GAFxC,wCAKO,SAAUgI,KAAV,kEACH,OADG,SACGG,aAAU,IAAKJ,IADlB,wC,0BCOGK,I,aAYOC,IAzBXC,GAAgB,yCAAG,+BAAAC,EAAA,+EAEMC,MAAM,oBAFZ,WAEXC,EAFW,QAGHC,GAHG,sBAIP,IAAIC,MAAMF,EAASG,YAJZ,uBAMEH,EAASI,OANX,cAMXC,EANW,yBAOVA,GAPU,wCASX,IAAIH,MAAJ,MATW,0DAAH,qDAatB,SAAUP,KAAV,wEAEQ,OAFR,kBAEcW,aAAM,KAFpB,OAGoC,OAHpC,SAG0Cb,aAAKI,IAH/C,OAIQ,OADMU,EAHd,gBAIcC,aAAIlH,EAAgBiH,IAJlC,+BAMQ,OANR,oCAMcC,aAAIpH,MANlB,QAOQ,OAPR,UAOckH,aAAM,KAPpB,QAQQ,OARR,UAQcE,aAAInH,MARlB,uDAYO,SAAUuG,KAAV,kEACH,OADG,SACGa,aAAWtH,EAAeuH,KAAMf,IADnC,wC,qBCxBQ,gFACX,OADW,SACLgB,aAAI,CAAClB,aAAKF,IAAsBE,aAAKG,MADhC,wCCCf,IAAMgB,GAAiBC,eAERC,eAAe,CAC5BC,QAAS,CACPxJ,MAAOyJ,IAETC,WAAY,CAACL,MAGfA,GAAeM,IAAIC,ICJnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,IACf,kBAAC,IAAD,CAAelN,MCbA,CACjBC,MAAO,CACHE,UAAW,UACX6C,WAAY,UACZF,SAAU,UACV8D,UAAW,UACXC,KAAM,UACN9D,MAAO,UACP7C,KAAM,UACNyG,YAAa,cACb9D,IAAK,UACLjC,MAAO,aDGP,kBAACjB,EAAD,MACA,kBAAC,GAAD,SAINwN,SAASC,eAAe,SLgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvH,QAAQuH,MAAMA,EAAMC,c","file":"static/js/main.7544c40b.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        font-family: 'Montserrat', sans-serif;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        background-color: rgb(250, 250, 250);\r\n    }\r\n`;","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const Navigation = styled.nav`\r\n    padding: 15px;\r\n    font-size: 18px;\r\n    text-align: center;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.alabaster};\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        font-size: 14px;\r\n        padding: 10px;\r\n}\r\n`;\r\n\r\nexport const NavigationList = styled.ul`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const NavigationItem = styled.li`\r\n    color: blue;\r\n    margin: 10px 40px;\r\n`;\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs({\r\n    activeClassName: \"active\",\r\n})`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n\r\n    &:visited{\r\n        color: ${({ theme }) => theme.color.white};\r\n    }\r\n\r\n    &:hover{\r\n        filter: brightness(90%);\r\n    }\r\n\r\n    &.active{\r\n        font-weight: 700;\r\n        filter: brightness(100%);\r\n    }\r\n`;","import React from 'react';\r\nimport { Navigation, NavigationList, NavigationItem, StyledNavLink } from \"./styled\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst PageNavigation = ({ navigationItems }) => (\r\n    <Navigation>\r\n        <NavigationList>\r\n            {navigationItems && navigationItems.length\r\n                ?\r\n                (navigationItems.map(navItem => (\r\n                    <NavigationItem key={navItem.id}>\r\n                        <StyledNavLink exact={navItem.exact} to={navItem.path}>{navItem.name}</StyledNavLink>\r\n                    </NavigationItem>))\r\n                )\r\n                : null}\r\n        </NavigationList>\r\n    </Navigation>\r\n);\r\n\r\nPageNavigation.propTypes = {\r\n    navigationItems: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\n\r\n\r\nexport default PageNavigation;","import styled from \"styled-components\";\r\n\r\nexport const AppTitle = styled.h1`\r\n    font-family: 'Arvo', serif;\r\n    text-align: center;\r\n    font-style: italic;\r\n    font-size: 36px;\r\n`;","import React from 'react';\r\nimport { AppTitle } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <AppTitle>\r\n            {title}\r\n        </AppTitle>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 1000px;\r\n    margin: 0 auto;\r\n    padding: 0 10px 10px;\r\n`;","import React from 'react';\r\nimport { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const StyledFooter = styled.footer`\r\n    padding: 15px;\r\n    font-size: 18px;\r\n    text-align: center;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.alabaster};\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        font-size: 14px;\r\n        padding: 10px;\r\n}\r\n`;","import React from 'react';\r\nimport { StyledFooter } from \"./styled\";\r\n\r\nconst Footer = ({ title }) => (\r\n    <StyledFooter>\r\n        {title}\r\n    </StyledFooter>\r\n);\r\n\r\nexport default Footer;","import styled, { css } from \"styled-components\";\r\n\r\nexport const TasksList = styled.ul`\r\n    list-style: none;\r\n    padding: 10px 20px;\r\n    margin: 0;\r\n    grid-area: list;\r\n`;\r\n\r\nexport const TaskItem = styled.li`\r\n    display: flex;\r\n    align-items: center;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alabaster};\r\n\r\n    ${({ hidden }) => (hidden && css`\r\n        display: none;\r\n    `)}\r\n`;\r\n\r\nexport const TaskContent = styled.p`\r\n    flex-grow: 1;\r\n    margin: 20px 10px;\r\n\r\n    ${({ done }) => (done && css`\r\n        text-decoration: line-through;\r\n    `)}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    flex-basis: 30px;\r\n    flex-shrink: 0;\r\n    height: 30px;\r\n    padding: 3px;\r\n    border: none;\r\n    cursor: pointer;\r\n    color: ${({ theme }) => theme.color.white};\r\n    transition: background-color 0.15s;\r\n\r\n    ${({ remove }) => (remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n        font-weight: 700;\r\n\r\n        &:hover{\r\n            background-color: ${({ theme }) => theme.color.lightRed};\r\n        }\r\n    `)}\r\n\r\n    ${({ done }) => (done && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n\r\n        &:hover{\r\n            background-color: ${({ theme }) => theme.color.lightGreen};\r\n        }\r\n    `)}\r\n`;","export const saveTasksInLocalStorage = (tasks) => localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./localStorageFunctions\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        isDoneTasksHidden: false,\r\n        exampleTasksLoading: false,\r\n        exampleTasksLoadingError: \"\",\r\n    },\r\n    reducers: {\r\n        addNewTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload)\r\n        },\r\n\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            tasks.forEach(task => {\r\n                if (task.id === payload) {\r\n                    task.done = !task.done;\r\n                };\r\n            });\r\n        },\r\n\r\n        removeTask: ({ tasks }, action) => {\r\n            const removeTaskIndex = tasks.findIndex(task => task.id === action.payload);\r\n            tasks.splice(removeTaskIndex, 1);\r\n        },\r\n\r\n        setAllTasksDone: (state) => {\r\n            state.tasks.forEach(task => task.done = true);\r\n        },\r\n\r\n        toggleHideDone: (state) => {\r\n            state.isDoneTasksHidden = !state.isDoneTasksHidden;\r\n        },\r\n\r\n        getSampleTasks: (state) => {\r\n            state.exampleTasksLoading = true;\r\n        },\r\n\r\n        getSampleTasksErrorHandle: (state) => {\r\n            state.exampleTasksLoading = false;\r\n            state.tasks = [];\r\n            state.exampleTasksLoadingError = \"Failed to load example tasks\";\r\n        },\r\n\r\n        resetExampleTasksLoadingError: (state) => {\r\n            state.exampleTasksLoadingError = \"\";\r\n        },\r\n\r\n        setExampleTasks: (state, { payload }) => {\r\n            state.tasks = payload;\r\n            state.exampleTasksLoading = false;\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    addNewTask,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    toggleHideDone,\r\n    setAllTasksDone,\r\n    getSampleTasks,\r\n    setExampleTasks,\r\n    getSampleTasksErrorHandle,\r\n    resetExampleTasksLoadingError,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasks = state => state.tasks;\r\nexport const selectExampleTaskLoading = state => state.tasks.exampleTasksLoading;\r\nexport const selectExampleTaskLoadingError = state => state.tasks.exampleTasksLoadingError;\r\nexport const selectQueryTask = (state, query) => {\r\n    if (!query || query.trim() === \"\") {\r\n        return selectTasks(state).tasks\r\n    }\r\n    const tasks = selectTasks(state).tasks.filter(({ description }) => description.toLowerCase().includes(query.toLowerCase().trim()));\r\n    return tasks;\r\n}\r\nexport default tasksSlice.reducer; ","import React from \"react\";\r\nimport { TasksList, TaskItem, TaskContent, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, selectQueryTask, toggleTaskDone, removeTask } from \"./tasksSlice\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst Tasks = () => {\r\n    const locationParams = useLocation();\r\n    const searchParams = new URLSearchParams(locationParams.search);\r\n    const queryTask = searchParams.get(\"task\");\r\n    const tasks = useSelector(state => selectQueryTask(state, queryTask));\r\n    console.log(tasks);\r\n    const { isDoneTasksHidden } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <TasksList>\r\n            {tasks.map(task => (\r\n                <TaskItem\r\n                    key={task.id}\r\n                    hidden={isDoneTasksHidden && task.done}\r\n                >\r\n                    <Button\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                        done\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n\r\n                    <TaskContent done={task.done}>{task.description}</TaskContent>\r\n\r\n                    <Button\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                        remove\r\n                    >\r\n                        🗑\r\n                </Button>\r\n\r\n                </TaskItem>\r\n            )\r\n            )}\r\n        </TasksList>\r\n    )\r\n};\r\n\r\nexport default Tasks;","import styled from \"styled-components\";\r\n\r\nexport const LineButton = styled.button`\r\n    background-color: ${({ theme }) => theme.color.transparent};\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    cursor: pointer;\r\n\r\n    &:hover{\r\n        color: ${({ theme }) => theme.color.lightTeal};\r\n    }\r\n\r\n    :disabled{\r\n        color: ${({ theme }) => theme.color.gray};\r\n        cursor: default;\r\n    }\r\n`;","import styled, { css } from \"styled-components\";\r\nimport { LineButton } from \"../LineButton/styled\";\r\n\r\nexport const StyledLineButton = styled(LineButton)`\r\n    ${({ hide }) => (hide && css`\r\n        grid-area: button--hide;\r\n    `)}\r\n\r\n    ${({ toggleDone }) => (toggleDone && css`\r\n        grid-area: button--toggleDone;\r\n        margin-right: 15px;\r\n\r\n        @media (max-width:515px) and (orientation:portrait) {\r\n                margin: 0;  \r\n            }\r\n    `)}\r\n`;","import React from 'react';\r\nimport { StyledLineButton } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllTasksDone } from \"../Tasks/tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, isDoneTasksHidden } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        tasks.length > 0 && (\r\n            <>\r\n                <StyledLineButton\r\n                    hide\r\n                    onClick={() => dispatch(toggleHideDone())}\r\n                >\r\n                    {isDoneTasksHidden ? \"Show done tasks\" : \"Hide done tasks\"}\r\n                </StyledLineButton>\r\n\r\n                <StyledLineButton\r\n                    toggleDone\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                    onClick={() => dispatch(setAllTasksDone())}\r\n                >\r\n                    Set all tasks done\r\n            </StyledLineButton>\r\n            </>\r\n        )\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    display: grid;\r\n    grid-template-areas: \"title button--hide button--toggleDone\" \"list list list\";\r\n    grid-template-columns: 1fr auto auto;\r\n    grid-gap: 20px;\r\n    align-items: center;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    margin-top: 20px;\r\n    padding: ${({ padding }) => padding};\r\n\r\n    ${({ blockDisplay }) => blockDisplay && css`\r\n        display: block;\r\n    `}\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        grid-template-areas: \"title\" \"button--hide\" \"button--toggleDone\" \"list\";\r\n        grid-template-columns: 1fr;\r\n}\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n    font-size: 22px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alabaster};\r\n    padding: 15px;\r\n    margin: 0;\r\n    grid-area: title;\r\n\r\n    ${({ centerTitle }) => centerTitle && css`\r\n        text-align: center;\r\n    `}\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        text-align: center;\r\n}\r\n`;","import React from \"react\";\r\nimport { StyledSection, SectionTitle } from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, sectionBody, blockDisplay, centerTitle, padding }) => (\r\n    <StyledSection\r\n        blockDisplay={blockDisplay}\r\n        padding={padding}\r\n    >\r\n\r\n        <SectionTitle centerTitle={centerTitle}>{title}</SectionTitle>\r\n        {extraHeaderContent}\r\n        {sectionBody}\r\n\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\nimport { LineButton } from \"../LineButton/styled\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: white;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 22px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alabaster};\r\n    padding: 15px;\r\n    margin-bottom: 0;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nexport const StyledLineButton = styled(LineButton)`\r\n    margin-right: 15px;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        margin-right: 0;\r\n    }\r\n`;\r\n\r\nexport const TitleSection = styled.div`\r\n    display:flex;\r\n    justify-content: space-between;\r\n    align-items: baseline;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n`;","import React from 'react';\r\nimport { StyledSection, Title, StyledLineButton, TitleSection } from \"./styled\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getSampleTasks, selectExampleTaskLoading, selectExampleTaskLoadingError } from \"../Tasks/tasksSlice\";\r\n\r\nconst NewTaskSection = ({ title, sectionBody }) => {\r\n    const loadingStatus = useSelector(selectExampleTaskLoading);\r\n    const loadingErrorInfo = useSelector(selectExampleTaskLoadingError);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <StyledSection>\r\n            <TitleSection>\r\n                <Title>{title}</Title>\r\n                <StyledLineButton\r\n                    disabled={loadingStatus || loadingErrorInfo}\r\n                    onClick={() => dispatch(getSampleTasks())}\r\n                >\r\n                    {loadingErrorInfo === \"\" ? (loadingStatus ? \"Loading...\" : \"Get Example Tasks\") : loadingErrorInfo}\r\n                </StyledLineButton>\r\n            </TitleSection>\r\n            {sectionBody}\r\n        </StyledSection>\r\n    )\r\n};\r\n\r\nexport default NewTaskSection;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    padding: 15px;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        flex-wrap: wrap;\r\n}\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    flex-grow: 1;\r\n    padding: 10px;\r\n    font-size: 20px;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        width: 100%;\r\n        flex-basis: 100%;\r\n        height: 50px;\r\n}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    flex-basis: 100px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({theme})=>theme.color.white};\r\n    padding: 5px;\r\n    border: none;\r\n    margin-left: 10px;\r\n    cursor: pointer;\r\n    transition: background-color 0.2s ease-in, transform 0.15s ease;\r\n\r\n    &:hover{\r\n        background-color: ${({theme})=>theme.color.lightTeal};\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        flex-basis: 100%;\r\n        margin: 10px 0;\r\n        padding: 10px;\r\n        height: 50px;\r\n        font-size: 20px;\r\n}\r\n`;","import React from \"react\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = ({ buttonContent, inputPlaceholder, onFormSubmit, inputRef, inputValue, onInputChange }) => {\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input ref={inputRef} value={inputValue} onChange={onInputChange} placeholder={inputPlaceholder} autoFocus />\r\n            <Button>{buttonContent}</Button>\r\n        </StyledForm>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addNewTask } from \"../Tasks/tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport Form from \"../Form\";\r\n\r\nconst NewTaskForm = () => {\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const inputFocus = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onInputChange = (event) => {\r\n        setTaskDescription(event.target.value)\r\n    }\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (taskDescription.trim()) {\r\n            dispatch(addNewTask({\r\n                description: taskDescription.trim(),\r\n                id: nanoid(),\r\n                done: false\r\n            }))\r\n        }\r\n        setTaskDescription(\"\");\r\n        inputFocus();\r\n    }\r\n    return (\r\n        <Form\r\n            onFormSubmit={onFormSubmit}\r\n            inputRef={inputRef}\r\n            inputValue={taskDescription}\r\n            onInputChange={onInputChange}\r\n            inputPlaceholder=\"What's to do?\"\r\n            buttonContent=\"Add Task\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default NewTaskForm;","import React, { useState, useEffect } from \"react\";\r\nimport Form from \"../Form\";\r\nimport { useHistory, useLocation } from \"react-router-dom\"\r\n\r\nconst SearchTaskForm = () => {\r\n    const [searchedTask, setSearchedTask] = useState(\"\");\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = (new URLSearchParams(location.search)).get(\"task\");\r\n\r\n    useEffect(() => {\r\n        setSearchedTask(query)\r\n    }, [location]);\r\n\r\n    const onInputChange = (event) => {\r\n        if (event.target.value === \"\") {\r\n            history.push(\"\");\r\n        }\r\n        setSearchedTask(event.target.value)\r\n    }\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const inputValueInForm = event.target[0].value;\r\n        history.push(`?task=${inputValueInForm}`);\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            inputPlaceholder=\"Searched task...\"\r\n            buttonContent=\"Filter\"\r\n            onFormSubmit={onFormSubmit}\r\n            inputValue={searchedTask}\r\n            onInputChange={onInputChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchTaskForm;","import React from 'react';\r\nimport Tasks from '../components/Tasks';\r\nimport Buttons from '../components/Buttons';\r\nimport Section from '../components/Section';\r\nimport NewTaskSection from '../components/NewTaskSection';\r\nimport NewTaskForm from \"../components/NewTaskForm\";\r\nimport SearchTaskForm from \"../components/SearchTaskForm\";\r\n\r\n\r\nconst TasksPage = () => (\r\n    <>\r\n\r\n        <NewTaskSection\r\n            title=\"Add new task\"\r\n            sectionBody={<NewTaskForm />}\r\n        />\r\n\r\n        <Section\r\n            blockDisplay\r\n            title=\"Filter tasks\"\r\n            sectionBody={<SearchTaskForm />}\r\n        />\r\n\r\n        <Section\r\n            title=\"Tasks List\"\r\n            extraHeaderContent={<Buttons />}\r\n            sectionBody={<Tasks />}\r\n        />\r\n\r\n    </>\r\n\r\n);\r\n\r\nexport default TasksPage;","import React from 'react';\r\nimport Section from '../components/Section';\r\n\r\nconst aboutMe = \"Hi everyone, my name is Mateusz. I'm 26 and I live in Rybnik, Silesia, Poland. My passion has been web development . I've been trying to learn new things and write more and more code lines everyday since January 2020. My main technology stacks are: HTML5, CSS3, JavaScript and React with Redux. For now, I work in company where I am SCADA developer and I work with OT Systems, but I hope in the near future I could say about myself that I'm Front-End Developer. This app is a part of my portfolio and should help me to reach this target.So use it with pleasure and enjoy:) \";\r\n\r\nconst AboutAuthorPage = () => (\r\n    <Section\r\n        blockDisplay\r\n        centerTitle\r\n        padding = \"0px 30px 30px\"\r\n        title=\"About Author\"\r\n        sectionBody={aboutMe}\r\n    />\r\n);\r\n\r\nexport default AboutAuthorPage;","import React from 'react';\r\nimport PageNavigation from \"./components/PageNavigation\";\r\nimport Header from './components/Header';\r\nimport Container from './components/Container';\r\nimport Footer from './components/Footer';\r\nimport TasksPage from './pages/TasksPage';\r\nimport AboutAuthorPage from './pages/AboutAuthorPage';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\r\n\r\nconst navigationItems = [\r\n  {\r\n    name: \"Tasks\",\r\n    path: \"/\",\r\n    exact: true,\r\n    id: 0,\r\n  },\r\n  {\r\n    name: \"About Author\",\r\n    path: \"/author\",\r\n    exact: false,\r\n    id: 1,\r\n  },\r\n]\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <BrowserRouter basename=\"task-management-app-react\">\r\n      <Container>\r\n\r\n        <Header title=\"Task management application\" />\r\n\r\n        <PageNavigation navigationItems={navigationItems} />\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\" component={TasksPage} />\r\n          <Route path=\"/author\" component={AboutAuthorPage} />\r\n          <Route>\r\n            <p>Error Page</p>\r\n          </Route>\r\n        </Switch>\r\n\r\n        <Footer title=\"Task management application by Mateusz Polok 2020\" />\r\n\r\n      </Container>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { call, takeEvery, select } from \"redux-saga/effects\";\r\nimport { selectTasks } from \"../components/Tasks/tasksSlice\";\r\nimport { saveTasksInLocalStorage } from \"../components/Tasks/localStorageFunctions\";\r\n\r\nfunction* setLocalStorageTask() {\r\n    const { tasks } = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* watchTaskChangeSaga() {\r\n    yield takeEvery(\"*\", setLocalStorageTask);\r\n}\r\n","import { call, delay, put, takeLatest } from \"redux-saga/effects\";\r\nimport { getSampleTasks, setExampleTasks, getSampleTasksErrorHandle, resetExampleTasksLoadingError } from \"../components/Tasks/tasksSlice\";\r\n\r\nconst fetchSampleTasks = async () => {\r\n    try {\r\n        const response = await fetch(\"sampleTasks.json\");\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (err) {\r\n        throw new Error(err)\r\n    }\r\n}\r\n\r\nfunction* getSampleTasksGenerator() {\r\n    try {\r\n        yield delay(1000);\r\n        const sampleTasksResponse = yield call(fetchSampleTasks);\r\n        yield put(setExampleTasks(sampleTasksResponse));\r\n    } catch {\r\n        yield put(getSampleTasksErrorHandle());\r\n        yield delay(2000);\r\n        yield put(resetExampleTasksLoadingError());\r\n    }\r\n}\r\n\r\nexport function* watchGetSampleTasks() {\r\n    yield takeLatest(getSampleTasks.type, getSampleTasksGenerator);\r\n}","import { all, call } from \"redux-saga/effects\";\r\nimport { watchTaskChangeSaga } from \"./localStorageSaga\";\r\nimport { watchGetSampleTasks } from \"./sampleTasksSaga\";\r\n\r\nexport default function* () {\r\n    yield all([call(watchTaskChangeSaga), call(watchGetSampleTasks)]);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../src/components/Tasks/tasksSlice\";\r\nimport createSaga from \"redux-saga\";\r\nimport rootSaga from \"./sagas/root\";\r\n\r\nconst sagaMiddleware = createSaga();\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from \"./GlobalStyle\"\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./theme\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\r\n    color: {\r\n        alabaster: \"#FAFAFA\",\r\n        lightGreen: \"#009900\",\r\n        lightRed: \"#FF4D4D\",\r\n        lightTeal: \"#009999\",\r\n        gray: \"#808080\",\r\n        green: \"#008000\",\r\n        teal: \"#008080\",\r\n        transparent: \"transparent\",\r\n        red: \"#FF0000\",\r\n        white: \"#FFFFFF\"\r\n    }\r\n}"],"sourceRoot":""}