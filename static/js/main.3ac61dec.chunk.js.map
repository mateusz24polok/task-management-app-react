{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","TaskSection/index.js","NewTaskSection/index.js","Header/index.js","Container/index.js","Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","placeholder","autoFocus","Tasks","tasks","isDoneTasksHidden","map","task","key","id","done","description","Buttons","toggleHideDone","length","onClick","disabled","every","TaskSection","title","extraHeaderContent","sectionBody","NewTaskSection","Header","Container","children","Footer","tasksArray","App","useState","setHideDone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8YAUeA,G,MAPF,kBACT,0BAAMC,UAAU,wBACZ,2BAAOA,UAAU,wBAAwBC,YAAY,gBAAgBC,WAAS,IAC9E,4BAAQF,UAAU,0BAAlB,eCUOG,G,MAbD,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,kBAAT,OACV,wBAAIL,UAAU,sBACTI,EAAME,KAAI,SAAAC,GAAI,OACX,wBAAIC,IAAKD,EAAKE,GAAIT,UAAS,iCAA4BK,GAAqBE,EAAKG,KAAO,iCAAmC,KACvH,4BAAQV,UAAS,mEAAsEO,EAAKG,KAAO,SAAM,IACzG,uBAAGV,UAAS,qCAAgCO,EAAKG,KAAO,mCAAqC,KAAOH,EAAKI,aACzG,4BAAQX,UAAS,qEAAjB,uBCYDY,G,MAlBC,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAOC,EAAV,EAAUA,kBAAmBQ,EAA7B,EAA6BA,eAA7B,OACZT,EAAMU,OAAS,GACX,oCACI,4BACId,UAAU,kDACVe,QAASF,GAERR,EAAoB,4BAAoB,wBAE7C,4BACIL,UAAU,wDACVgB,SAAUZ,EAAMa,OAAM,qBAAGP,SAF7B,4BCDGQ,G,MARK,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,mBAAoBC,EAA7B,EAA6BA,YAA7B,OAChB,6BAASrB,UAAU,gBACf,wBAAIA,UAAU,uBAAuBmB,GACpCC,EACAC,KCGMC,G,MAPQ,SAAC,GAAD,IAAEH,EAAF,EAAEA,MAAOE,EAAT,EAASA,YAAT,OACnB,6BAASrB,UAAU,kBACf,wBAAIA,UAAU,yBAAyBmB,GACtCE,KCGME,G,MANA,SAAC,GAAD,IAAEJ,EAAF,EAAEA,MAAF,OACX,4BAAQnB,UAAU,UACd,wBAAIA,UAAU,YAAYmB,MCInBK,G,MANG,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACd,0BAAMzB,UAAU,aACXyB,KCEMC,G,MAJA,SAAC,GAAD,IAAEP,EAAF,EAAEA,MAAF,OACX,4BAAQnB,UAAU,UAAUmB,KCM1BQ,EAAa,CACjB,CAAElB,GAAI,EAAGE,YAAa,8BAAqBD,MAAM,GACjD,CAAED,GAAI,EAAGE,YAAa,wBAAeD,MAAM,IAkD9BkB,MA7Cf,WAAgB,IAAD,EAE4BC,oBAAS,GAFrC,mBAENxB,EAFM,KAEayB,EAFb,KAQb,OACE,kBAAC,EAAD,KAEE,kBAAC,EAAD,CAAQX,MAAM,gCAEd,kBAAC,EAAD,CACEA,MAAM,eACNE,YACE,kBAAC,EAAD,QAIJ,kBAAC,EAAD,CACEF,MAAM,aAENC,mBACE,kBAAC,EAAD,CACEP,eArBa,WACrBiB,GAAY,SAAAzB,GAAiB,OAAKA,MAqB1BD,MAAOuB,EACPtB,kBAAmBA,IAIvBgB,YACE,kBAAC,EAAD,CACEjB,MAAOuB,EACPtB,kBAAmBA,MAKzB,kBAAC,EAAD,CAAQc,MAAM,wDC5CAY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3ac61dec.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = () => (\r\n    <form className=\"newTaskSection__form\">\r\n        <input className=\"newTaskSection__input\" placeholder=\"What's to do?\" autoFocus />\r\n        <button className=\"newTaskSection__button\">Add task</button>\r\n    </form>\r\n)\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, isDoneTasksHidden}) => (\r\n    <ul className=\"tasksSection__list\">\r\n        {tasks.map(task => (\r\n            <li key={task.id} className={`tasksSection__listItem ${isDoneTasksHidden && task.done ? \"tasksSection__listItem--hidden\" : \"\"}`}>\r\n                <button className={`tasksSection__listItemButton tasksSection__listItemButton--done`}>{task.done ? \"âœ”\" : \"\"}</button>\r\n                <p className={`tasksSection__listItemText ${task.done ? \"tasksSection__listItemText--done\" : \"\"}`}>{task.description}</p>\r\n                <button className={`tasksSection__listItemButton tasksSection__listItemButton--delete`}>ðŸ—‘</button>\r\n            </li>\r\n        )\r\n        )}\r\n    </ul >\r\n);\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Buttons = ({ tasks, isDoneTasksHidden, toggleHideDone }) => (\r\n    tasks.length > 0 && (\r\n        <>\r\n            <button\r\n                className=\"tasksSection__button tasksSection__button--hide\"\r\n                onClick={toggleHideDone}\r\n            >\r\n                {isDoneTasksHidden ? \"PokaÅ¼ ukoÅ„czone\" : \"Ukryj ukoÅ„czone\"}\r\n            </button>\r\n            <button\r\n                className=\"tasksSection__button tasksSection__button--toggleDone\"\r\n                disabled={tasks.every(({ done }) => done)}>\r\n                UkoÅ„cz wszystkie\r\n            </button>\r\n        </>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst TaskSection = ({title, extraHeaderContent, sectionBody}) => (\r\n    <section className=\"tasksSection\">\r\n        <h2 className=\"tasksSection__title\">{title}</h2>\r\n        {extraHeaderContent}\r\n        {sectionBody}\r\n    </section>\r\n);\r\n\r\nexport default TaskSection;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst NewTaskSection = ({title, sectionBody}) => (\r\n    <section className=\"newTaskSection\">\r\n        <h2 className=\"newTaskSection__title\">{title}</h2>\r\n        {sectionBody}\r\n    </section>\r\n);\r\n\r\nexport default NewTaskSection;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Header = ({title}) => (\r\n    <header className=\"header\">\r\n        <h1 className=\"appTitle\">{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Container = ({children})=>(\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Footer = ({title}) => (\r\n    <footer className=\"footer\">{title}</footer>\r\n);\r\n\r\nexport default Footer;","import React, { useState } from 'react';\nimport Form from './Form';\nimport Tasks from './Tasks';\nimport Buttons from './Buttons';\nimport TaskSection from './TaskSection';\nimport NewTaskSection from './NewTaskSection';\nimport Header from './Header';\nimport Container from './Container';\nimport Footer from './Footer';\n\nconst tasksArray = [\n  { id: 1, description: \"PrzejÅ›Ä‡ na Reacta\", done: true },\n  { id: 2, description: \"ZjeÅ›Ä‡ obiad\", done: false },\n];\n\n\n\nfunction App() {\n\n  const [isDoneTasksHidden, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(isDoneTasksHidden => !isDoneTasksHidden);\n  };\n\n  return (\n    <Container>\n\n      <Header title=\"Task management application\" />\n\n      <NewTaskSection\n        title=\"Add new task\"\n        sectionBody={\n          <Form />\n        }\n      />\n\n      <TaskSection\n        title=\"Tasks List\"\n\n        extraHeaderContent={\n          <Buttons\n            toggleHideDone={toggleHideDone}\n            tasks={tasksArray}\n            isDoneTasksHidden={isDoneTasksHidden}\n          />\n        }\n\n        sectionBody={\n          <Tasks\n            tasks={tasksArray}\n            isDoneTasksHidden={isDoneTasksHidden}\n          />\n        }\n      />\n\n      <Footer title=\"Task management application by Mateusz Polok 2020\" />\n\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}