{"version":3,"sources":["GlobalStyle.js","components/Form/styled.js","components/Tasks/localStorageFunctions.js","components/Tasks/tasksSlice.js","components/Form/index.js","components/Tasks/styled.js","components/Tasks/index.js","components/LineButton/styled.js","components/Buttons/styled.js","components/Buttons/index.js","components/TaskSection/styled.js","components/TaskSection/index.js","components/NewTaskSection/styled.js","components/NewTaskSection/index.js","components/PageNavigation/styled.js","components/PageNavigation/index.js","components/Header/styled.js","components/Header/index.js","components/Container/styled.js","components/Container/index.js","components/Footer/styled.js","components/Footer/index.js","App.js","serviceWorker.js","sagas/localStorageSaga.js","sagas/sampleTasksSaga.js","sagas/root.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","NewTaskForm","styled","form","NewTaskInput","input","NewTaskButton","button","theme","color","teal","white","lightTeal","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","isDoneTasksHidden","exampleTasksLoading","exampleTasksLoadingError","reducers","addNewTask","payload","push","toggleTaskDone","forEach","task","id","done","removeTask","action","removeTaskIndex","findIndex","splice","setAllTasksDone","state","toggleHideDone","getSampleTasks","getSampleTasksErrorHandle","resetExampleTasksLoadingError","setExampleTasks","actions","selectTasks","selectExampleTaskLoading","selectExampleTaskLoadingError","Form","useState","taskDescription","setTaskDescription","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","description","nanoid","current","focus","ref","value","onChange","target","placeholder","autoFocus","TasksList","ul","TaskItem","li","alabaster","hidden","css","TaskContent","p","Button","remove","red","lightRed","green","lightGreen","Tasks","useSelector","map","key","onClick","LineButton","transparent","gray","StyledLineButton","hide","toggleDone","Buttons","length","disabled","every","StyledSection","section","SectionTitle","h2","TaskSection","title","extraHeaderContent","sectionBody","Title","h1","TitleSection","div","NewTaskSection","loadingStatus","loadingErrorInfo","Navigation","nav","NavigationList","NavigationItem","PageNavigation","navigationItems","navItem","href","AppTitle","Header","StyledContainer","main","Container","children","StyledFooter","footer","Footer","App","Boolean","window","location","hostname","match","setLocalStorageTask","watchTaskChangeSaga","select","call","takeEvery","getSampleTasksGenerator","watchGetSampleTasks","fetchSampleTasks","a","fetch","response","ok","Error","statusText","json","data","delay","sampleTasksResponse","put","takeLatest","type","all","sagaMiddleware","createSaga","configureStore","reducer","tasksReducer","middleware","run","rootSaga","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0aefd7e7.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        font-family: 'Montserrat', sans-serif;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        background-color: rgb(250, 250, 250);\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const NewTaskForm = styled.form`\r\n    display: flex;\r\n    padding: 15px;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        flex-wrap: wrap;\r\n}\r\n`;\r\n\r\nexport const NewTaskInput = styled.input`\r\n    flex-grow: 1;\r\n    padding: 10px;\r\n    font-size: 20px;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        width: 100%;\r\n        flex-basis: 100%;\r\n        height: 50px;\r\n}\r\n`;\r\n\r\nexport const NewTaskButton = styled.button`\r\n    flex-basis: 100px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({theme})=>theme.color.white};\r\n    padding: 5px;\r\n    border: none;\r\n    margin-left: 10px;\r\n    cursor: pointer;\r\n    transition: background-color 0.2s ease-in, transform 0.15s ease;\r\n\r\n    &:hover{\r\n        background-color: ${({theme})=>theme.color.lightTeal};\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        flex-basis: 100%;\r\n        margin: 10px 0;\r\n        padding: 10px;\r\n        height: 50px;\r\n        font-size: 20px;\r\n}\r\n`;","export const saveTasksInLocalStorage = (tasks) => localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./localStorageFunctions\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        isDoneTasksHidden: false,\r\n        exampleTasksLoading: false,\r\n        exampleTasksLoadingError: \"\",\r\n    },\r\n    reducers: {\r\n        addNewTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload)\r\n        },\r\n\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            tasks.forEach(task => {\r\n                if (task.id === payload) {\r\n                    task.done = !task.done;\r\n                };\r\n            });\r\n        },\r\n\r\n        removeTask: ({ tasks }, action) => {\r\n            const removeTaskIndex = tasks.findIndex(task => task.id === action.payload);\r\n            tasks.splice(removeTaskIndex, 1);\r\n        },\r\n\r\n        setAllTasksDone: (state) => {\r\n            state.tasks.forEach(task => task.done = true);\r\n        },\r\n\r\n        toggleHideDone: (state) => {\r\n            state.isDoneTasksHidden = !state.isDoneTasksHidden;\r\n        },\r\n\r\n        getSampleTasks: (state) => {\r\n            state.exampleTasksLoading = true;\r\n        },\r\n\r\n        getSampleTasksErrorHandle: (state) => {\r\n            state.exampleTasksLoading = false;\r\n            state.tasks = [];\r\n            state.exampleTasksLoadingError = \"Failed to load example tasks\";\r\n        },\r\n\r\n        resetExampleTasksLoadingError: (state) => {\r\n            state.exampleTasksLoadingError = \"\";\r\n        },\r\n\r\n        setExampleTasks: (state, { payload }) => {\r\n            state.tasks = payload;\r\n            state.exampleTasksLoading = false;\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    addNewTask,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    toggleHideDone,\r\n    setAllTasksDone,\r\n    getSampleTasks,\r\n    setExampleTasks,\r\n    getSampleTasksErrorHandle,\r\n    resetExampleTasksLoadingError,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasks = state => state.tasks;\r\nexport const selectExampleTaskLoading = state => state.tasks.exampleTasksLoading;\r\nexport const selectExampleTaskLoadingError = state => state.tasks.exampleTasksLoadingError;\r\nexport default tasksSlice.reducer; ","import React, { useState, useRef } from \"react\";\r\nimport { NewTaskForm, NewTaskInput, NewTaskButton } from \"./styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addNewTask } from \"../Tasks/tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const inputFocus = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onInputChange = (event) => {\r\n        setTaskDescription(event.target.value)\r\n    }\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (taskDescription.trim()) {\r\n            dispatch(addNewTask({\r\n                description: taskDescription.trim(),\r\n                id: nanoid(),\r\n                done: false\r\n            }))\r\n        }\r\n        setTaskDescription(\"\");\r\n        inputFocus();\r\n    }\r\n    return (\r\n        <NewTaskForm onSubmit={onFormSubmit}>\r\n            <NewTaskInput ref={inputRef} value={taskDescription} onChange={onInputChange} placeholder=\"What's to do?\" autoFocus />\r\n            <NewTaskButton>Add task</NewTaskButton>\r\n        </NewTaskForm>\r\n    )\r\n}\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const TasksList = styled.ul`\r\n    list-style: none;\r\n    padding: 10px 20px;\r\n    margin: 0;\r\n    grid-area: list;\r\n`;\r\n\r\nexport const TaskItem = styled.li`\r\n    display: flex;\r\n    align-items: center;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alabaster};\r\n\r\n    ${({ hidden }) => (hidden && css`\r\n        display: none;\r\n    `)}\r\n`;\r\n\r\nexport const TaskContent = styled.p`\r\n    flex-grow: 1;\r\n    margin: 20px 10px;\r\n\r\n    ${({ done }) => (done && css`\r\n        text-decoration: line-through;\r\n    `)}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    flex-basis: 30px;\r\n    flex-shrink: 0;\r\n    height: 30px;\r\n    padding: 3px;\r\n    border: none;\r\n    cursor: pointer;\r\n    color: ${({ theme }) => theme.color.white};\r\n    transition: background-color 0.15s;\r\n\r\n    ${({ remove }) => (remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n        font-weight: 700;\r\n\r\n        &:hover{\r\n            background-color: ${({ theme }) => theme.color.lightRed};\r\n        }\r\n    `)}\r\n\r\n    ${({ done }) => (done && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n\r\n        &:hover{\r\n            background-color: ${({ theme }) => theme.color.lightGreen};\r\n        }\r\n    `)}\r\n`;","import React from \"react\";\r\nimport { TasksList, TaskItem, TaskContent, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"./tasksSlice\";\r\n\r\nconst Tasks = () => {\r\n    const { tasks, isDoneTasksHidden } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <TasksList>\r\n            {tasks.map(task => (\r\n                <TaskItem\r\n                    key={task.id}\r\n                    hidden={isDoneTasksHidden && task.done}\r\n                >\r\n                    <Button\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                        done\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n\r\n                    <TaskContent done={task.done}>{task.description}</TaskContent>\r\n\r\n                    <Button\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                        remove\r\n                    >\r\n                        🗑\r\n                </Button>\r\n\r\n                </TaskItem>\r\n            )\r\n            )}\r\n        </TasksList>\r\n    )\r\n};\r\n\r\nexport default Tasks;","import styled from \"styled-components\";\r\n\r\nexport const LineButton = styled.button`\r\n    background-color: ${({ theme }) => theme.color.transparent};\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    cursor: pointer;\r\n\r\n    &:hover{\r\n        color: ${({ theme }) => theme.color.lightTeal};\r\n    }\r\n\r\n    :disabled{\r\n        color: ${({ theme }) => theme.color.gray};\r\n        cursor: default;\r\n    }\r\n`;","import styled, { css } from \"styled-components\";\r\nimport { LineButton } from \"../LineButton/styled\";\r\n\r\nexport const StyledLineButton = styled(LineButton)`\r\n    ${({ hide }) => (hide && css`\r\n        grid-area: button--hide;\r\n    `)}\r\n\r\n    ${({ toggleDone }) => (toggleDone && css`\r\n        grid-area: button--toggleDone;\r\n        margin-right: 15px;\r\n\r\n        @media (max-width:515px) and (orientation:portrait) {\r\n                margin: 0;  \r\n            }\r\n    `)}\r\n`;","import React from 'react';\r\nimport { StyledLineButton } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllTasksDone } from \"../Tasks/tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, isDoneTasksHidden } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        tasks.length > 0 && (\r\n            <>\r\n                <StyledLineButton\r\n                    hide\r\n                    onClick={() => dispatch(toggleHideDone())}\r\n                >\r\n                    {isDoneTasksHidden ? \"Show done tasks\" : \"Hide done tasks\"}\r\n                </StyledLineButton>\r\n\r\n                <StyledLineButton\r\n                    toggleDone\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                    onClick={() => dispatch(setAllTasksDone())}\r\n                >\r\n                    Set all tasks done\r\n            </StyledLineButton>\r\n            </>\r\n        )\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    display: grid;\r\n    grid-template-areas: \"title button--hide button--toggleDone\" \"list list list\";\r\n    grid-template-columns: 1fr auto auto;\r\n    grid-gap: 20px;\r\n    align-items: center;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    margin-top: 20px;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        grid-template-areas: \"title\" \"button--hide\" \"button--toggleDone\" \"list\";\r\n        grid-template-columns: 1fr;\r\n}\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n    font-size: 22px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alabaster};\r\n    padding: 15px;\r\n    margin: 0;\r\n    grid-area: title;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        text-align: center;\r\n}\r\n`;","import React from \"react\";\r\nimport { StyledSection, SectionTitle } from \"./styled\";\r\n\r\nconst TaskSection = ({ title, extraHeaderContent, sectionBody }) => (\r\n    <StyledSection>\r\n        <SectionTitle>{title}</SectionTitle>\r\n        {extraHeaderContent}\r\n        {sectionBody}\r\n    </StyledSection>\r\n);\r\n\r\nexport default TaskSection;","import styled from \"styled-components\";\r\nimport { LineButton } from \"../LineButton/styled\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: white;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 22px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alabaster};\r\n    padding: 15px;\r\n    margin-bottom: 0;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nexport const StyledLineButton = styled(LineButton)`\r\n    margin-right: 15px;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        margin-right: 0;\r\n    }\r\n`;\r\n\r\nexport const TitleSection = styled.div`\r\n    display:flex;\r\n    justify-content: space-between;\r\n    align-items: baseline;\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n`;","import React from 'react';\r\nimport { StyledSection, Title, StyledLineButton, TitleSection } from \"./styled\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getSampleTasks, selectExampleTaskLoading, selectExampleTaskLoadingError } from \"../Tasks/tasksSlice\";\r\n\r\nconst NewTaskSection = ({ title, sectionBody }) => {\r\n    const loadingStatus = useSelector(selectExampleTaskLoading);\r\n    const loadingErrorInfo = useSelector(selectExampleTaskLoadingError);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <StyledSection>\r\n            <TitleSection>\r\n                <Title>{title}</Title>\r\n                <StyledLineButton\r\n                    disabled={loadingStatus || loadingErrorInfo}\r\n                    onClick={() => dispatch(getSampleTasks())}\r\n                >\r\n                    {loadingErrorInfo === \"\" ? (loadingStatus ? \"Loading...\" : \"Get Example Tasks\") : loadingErrorInfo}\r\n                </StyledLineButton>\r\n            </TitleSection>\r\n            {sectionBody}\r\n        </StyledSection>\r\n    )\r\n};\r\n\r\nexport default NewTaskSection;","import styled from \"styled-components\";\r\n\r\nexport const Navigation = styled.nav`\r\n    padding: 15px;\r\n    font-size: 18px;\r\n    text-align: center;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.alabaster};\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        font-size: 14px;\r\n        padding: 10px;\r\n}\r\n`;\r\n\r\nexport const NavigationList = styled.ul`\r\n    list-style: none;\r\n`;\r\n\r\nexport const NavigationItem = styled.li`\r\n    color: blue;\r\n`;","import React from 'react';\r\nimport { Navigation, NavigationList, NavigationItem } from \"./styled\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst PageNavigation = ({ navigationItems }) => (\r\n    <Navigation>\r\n        <NavigationList>\r\n            {navigationItems && navigationItems.length\r\n                ?\r\n                (navigationItems.map(navItem => (\r\n                    <NavigationItem key={navItem}>\r\n                        <a href=\"#\">{navItem}</a>\r\n                    </NavigationItem>)))\r\n                : null}\r\n        </NavigationList>\r\n    </Navigation>\r\n);\r\n\r\nPageNavigation.propTypes = {\r\n    navigationItems: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\n\r\n\r\nexport default PageNavigation;","import styled from \"styled-components\";\r\n\r\nexport const AppTitle = styled.h1`\r\n    font-family: 'Arvo', serif;\r\n    text-align: center;\r\n    font-style: italic;\r\n    font-size: 36px;\r\n`;","import React from 'react';\r\nimport { AppTitle } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <AppTitle>\r\n            {title}\r\n        </AppTitle>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 1000px;\r\n    margin: 0 auto;\r\n    padding: 0 10px 10px;\r\n`;","import React from 'react';\r\nimport { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const StyledFooter = styled.footer`\r\n    padding: 15px;\r\n    font-size: 18px;\r\n    text-align: center;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.alabaster};\r\n\r\n    @media (max-width:515px) and (orientation:portrait) {\r\n        font-size: 14px;\r\n        padding: 10px;\r\n}\r\n`;","import React from 'react';\r\nimport { StyledFooter } from \"./styled\";\r\n\r\nconst Footer = ({ title }) => (\r\n    <StyledFooter>\r\n        {title}\r\n    </StyledFooter>\r\n);\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Form from './components/Form';\r\nimport Tasks from './components/Tasks';\r\nimport Buttons from './components/Buttons';\r\nimport TaskSection from './components/TaskSection';\r\nimport NewTaskSection from './components/NewTaskSection';\r\nimport PageNavigation from \"./components/PageNavigation\";\r\nimport Header from './components/Header';\r\nimport Container from './components/Container';\r\nimport Footer from './components/Footer';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Container>\r\n\r\n      <Header title=\"Task management application\" />\r\n\r\n      <PageNavigation navigationItems={[\"Tasks\", \"About author\"]} />\r\n\r\n      <NewTaskSection\r\n        title=\"Add new task\"\r\n        sectionBody={<Form />}\r\n      />\r\n\r\n      <TaskSection\r\n        title=\"Tasks List\"\r\n        extraHeaderContent={<Buttons />}\r\n        sectionBody={<Tasks />}\r\n      />\r\n\r\n      <Footer title=\"Task management application by Mateusz Polok 2020\" />\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { call, takeEvery, select } from \"redux-saga/effects\";\r\nimport { selectTasks } from \"../components/Tasks/tasksSlice\";\r\nimport { saveTasksInLocalStorage } from \"../components/Tasks/localStorageFunctions\";\r\n\r\nfunction* setLocalStorageTask() {\r\n    const { tasks } = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* watchTaskChangeSaga() {\r\n    yield takeEvery(\"*\", setLocalStorageTask);\r\n}\r\n","import { call, delay, put, takeLatest } from \"redux-saga/effects\";\r\nimport { getSampleTasks, setExampleTasks, getSampleTasksErrorHandle, resetExampleTasksLoadingError } from \"../components/Tasks/tasksSlice\";\r\n\r\nconst fetchSampleTasks = async () => {\r\n    try {\r\n        const response = await fetch(\"task-management-app-react/sampleTasks.json\");\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (err) {\r\n        throw new Error(err)\r\n    }\r\n}\r\n\r\nfunction* getSampleTasksGenerator() {\r\n    try {\r\n        yield delay(1000);\r\n        const sampleTasksResponse = yield call(fetchSampleTasks);\r\n        yield put(setExampleTasks(sampleTasksResponse));\r\n    } catch {\r\n        yield put(getSampleTasksErrorHandle());\r\n        yield delay(2000);\r\n        yield put(resetExampleTasksLoadingError());\r\n    }\r\n}\r\n\r\nexport function* watchGetSampleTasks() {\r\n    yield takeLatest(getSampleTasks.type, getSampleTasksGenerator);\r\n}","import { all, call } from \"redux-saga/effects\";\r\nimport { watchTaskChangeSaga } from \"./localStorageSaga\";\r\nimport { watchGetSampleTasks } from \"./sampleTasksSaga\";\r\n\r\nexport default function* () {\r\n    yield all([call(watchTaskChangeSaga), call(watchGetSampleTasks)]);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../src/components/Tasks/tasksSlice\";\r\nimport createSaga from \"redux-saga\";\r\nimport rootSaga from \"./sagas/root\";\r\n\r\nconst sagaMiddleware = createSaga();\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from \"./GlobalStyle\"\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./theme\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\r\n    color: {\r\n        alabaster: \"#FAFAFA\",\r\n        lightGreen: \"#009900\",\r\n        lightRed: \"#FF4D4D\",\r\n        lightTeal: \"#009999\",\r\n        gray: \"#808080\",\r\n        green: \"#008000\",\r\n        teal: \"#008080\",\r\n        transparent: \"transparent\",\r\n        red: \"#FF0000\",\r\n        white: \"#FFFFFF\"\r\n    }\r\n}"],"sourceRoot":""}